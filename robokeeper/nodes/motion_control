#!/usr/bin/env python3
""" The motion_control node publishes jointTrajectory messages to actuate the HDT Adroit 6-dof arm to mimic a goalkeeper.
    It also actuates the arm to a specified position using moveit commander when performing tasks that do not require fast actuator response.

    SUBSCRIBERS:
        goalie_coord (robokeeper/GoalieCoord) - x,y,z coordinates of the detected ball

    PUBLIHSERS:
        move_group/display_planned_path (moveit_msgs/DisplayTrajectory)
        pincer_joint_position_controller/command (std_msgs/Float64) - desired joint position of the pincer
        arm_controller/command (trajectory_msgs/JointTrajectory) - desired joint positions of the arm joints
        /scores (robokeeper/Scores) - human score and robot score
    
    SERVICE:
        reset (std_srvs/Empty) - resets arm position to keeper Home
        step (std_srvs/Pose) - move robot end effector to a specified point in 3D space
        keep (std_srvs/Empty) - if keeping flag is true, publish joint trajectory to arm controller to follow a moving ball
        start_keeping (std_srvs/Empty) - set keeping flag to true
        stop_keeping (std_srvs/Empty) - set keeping flag to false
        close (std_srvs/Empty) - close the pincer
        open (std_srvs/Empty) - open the pincer
        above_paddle (std_srvs/Empty) - move robot end effector above the fixed paddle holster and open the gripper
        retrieve_paddle (std_srvs/Empty) - move robot end effector to grab paddle from the fixed paddle holster 
"""
import sys
import copy
import rospy
import moveit_commander
import moveit_msgs.msg
import geometry_msgs.msg
from std_msgs.msg import Float64
from std_srvs.srv import Empty, EmptyRequest, EmptyResponse
from robokeeper.srv import Moveit, MoveitRequest, MoveitResponse, Keeper, KeeperRequest, KeeperResponse
from robokeeper.msg import Goalie_coord, Scores
from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import Pose
from trajectory_msgs.msg import JointTrajectory, JointTrajectoryPoint
import numpy as np
from robokeeper_library.robokeeper_functions import joint_lookup_table, traj_linear_reg

class MotionControl():
    """ Initilaize motion_control node. 
    publishes joint positions to arm and pincer controllers, causing the robotic arm to track the movement of the ball 
    """
    def __init__(self) -> None:
        self.paddle_x = rospy.get_param("/paddle_x")
        self.paddle_y = rospy.get_param("/paddle_y")
        self.paddle_z_above = rospy.get_param("/paddle_z_above")
        self.paddle_z_align = rospy.get_param("/paddle_z_align")
        self.ground_l = rospy.get_param("/ground_l")
        self.ground_w = rospy.get_param("/ground_w")
        self.ground_h = rospy.get_param("/ground_h")
        self.goal_l = rospy.get_param("/goal_l")
        self.goal_w = rospy.get_param("/goal_w")
        self.goal_h = rospy.get_param("/goal_h")
        # initialize node and moveit commander
        moveit_commander.roscpp_initialize(sys.argv)
        rospy.init_node('motion', anonymous=True)
        self.scene = moveit_commander.PlanningSceneInterface()
        rospy.sleep(1)
        self.robot = moveit_commander.RobotCommander()

        # Adding collision object to the planning scene to simulate the ground
        base_pose = geometry_msgs.msg.PoseStamped()
        base_pose.header.frame_id = 'base_link'
        base_pose.pose.position.x = 0
        base_pose.pose.position.y = 0
        base_pose.pose.position.z = -1
        base_pose.pose.orientation.w = 1.0
        self.scene.attach_box('base_link','ground', pose=base_pose, size=(self.ground_l, self.ground_w, self.ground_h))
        
        # Adding collision object to the planning scene to simulate the goal
        base_pose = geometry_msgs.msg.PoseStamped()
        base_pose.header.frame_id = 'base_link'
        base_pose.pose.position.x = 0.15
        base_pose.pose.position.y = 0
        base_pose.pose.position.z = -.2
        base_pose.pose.orientation.w = 1.0
        self.scene.attach_box('base_link','goal', pose=base_pose, size=(self.goal_l, self.goal_w, self.goal_h))
       
        # initialize score counters
        self.ball_in_net = False
        self.goals = 0
        self.saves = 0
        
        rospy.sleep(2)

        # Initialize arm move group for moveit
        group_name = "arm"
        self.move_group_commander = moveit_commander.MoveGroupCommander(group_name)
        self.move_group_commander.set_max_velocity_scaling_factor(1)
        self.move_group_commander.set_max_acceleration_scaling_factor(1)
        
        # Initialize publishers
        self.display_trajectory_publisher =\
            rospy.Publisher('/move_group/display_planned_path',moveit_msgs.msg.DisplayTrajectory,queue_size=20)
        self.pincer_pos_publisher = rospy.Publisher("/pincer_joint_position_controller/command", Float64,queue_size=10)
        self.move_hdt_pub = rospy.Publisher("/arm_controller/command", JointTrajectory,queue_size=10) 
        self.score_pub = rospy.Publisher("/scores", Scores, queue_size = 10) # Publish scores
        
        # Initialize services
        self.paddle_srv_above = rospy.Service("above_paddle",Empty, self.PaddleAboveCallback)
        self.paddle_srv_retrieve = rospy.Service("retrieve_paddle",Empty, self.PaddleRetrieveCallback)
        self.reset_srv = rospy.Service("reset", Empty, self.ResetCallback)
        self.step_srv = rospy.Service("step", Moveit, self.StepCallback)
        self.keeper_srv = rospy.Service("keep", Keeper, self.KeeperCallback)
        self.keeping_srv = rospy.Service("start_keeping", Empty, self.KeepingCallback)
        self.stoping_srv = rospy.Service("stop_keeping", Empty, self.StoppingCallback)
        self.close_srv = rospy.Service("close", Empty, self.CloseCallback)
        self.open_srv = rospy.Service("open", Empty, self.OpenCallback)

        # Initialize subscriber
        self.sub = rospy.Subscriber("/Goalie_coord", Goalie_coord, self.PositionInputCallback)

        # Set home pose
        quaternion = quaternion_from_euler(0, 1.5707, 0, axes='sxyz')
        self.home_pose = Pose()
        self.home_pose.position.x = 0.32
        self.home_pose.position.z = -0.22
        self.home_pose.orientation.x = quaternion[0]
        self.home_pose.orientation.y = quaternion[1]
        self.home_pose.orientation.z = quaternion[2]
        self.home_pose.orientation.w = quaternion[3]

        # flags and variables needed for keeping algorithm
        self.now_keep = True
        self.current_y = 0

        self.msg_count = 0
        self.keeping = False

        self.pre_y = [0, 0, 0, 0, 0, 0]

        rospy.sleep(5)

        # Reseting robot to home position
        start = self.ResetCallback(EmptyRequest)


    def PaddleAboveCallback(self, req: EmptyRequest) -> EmptyResponse:
        """ Callback function for the above_paddle service
        The robot moves its end effector above the paddle holster, and opens the gripper.

         Args:
          req (std_msgs/Empty)
        Returns:
           EmptyResponse
        """

        quaternion = quaternion_from_euler(0, 1.5707, 1.5707, axes='sxyz')
        paddle_pose = Pose()
        paddle_pose.position.x = self.paddle_x 
        paddle_pose.position.y = self.paddle_y
        paddle_pose.position.z = self.paddle_z_above
        paddle_pose.orientation.x = quaternion[0]
        paddle_pose.orientation.y = quaternion[1]
        paddle_pose.orientation.z = quaternion[2]
        paddle_pose.orientation.w = quaternion[3]
        self.move_group_commander.set_pose_target(paddle_pose)
        succ, plan, time, error_code = self.move_group_commander.plan()
        if not succ:
            self.move_group_commander.clear_pose_targets()
            return  None
        self.move_group_commander.execute(plan, wait=True)
        self.move_group_commander.stop()
        self.move_group_commander.clear_pose_targets()
        
        # open gripper
        self.pincer_pos_publisher.publish(0.8)
        
        return EmptyResponse()

    def PaddleRetrieveCallback(self, req: EmptyRequest) -> EmptyResponse:
        """ Callback function for the retrieve_paddle service
        The robot moves its end effector to grab the paddle, then return to the above_paddle position.

         Args:
          req (std_msgs/Empty)
        Returns:
           EmptyResponse
        """
        quaternion = quaternion_from_euler(0, 1.5707, 1.5707, axes='sxyz')
        paddle_pose = Pose()
        paddle_pose.position.x = self.paddle_x 
        paddle_pose.position.y = self.paddle_y
        paddle_pose.position.z = self.paddle_z_align
        paddle_pose.orientation.x = quaternion[0]
        paddle_pose.orientation.y = quaternion[1]
        paddle_pose.orientation.z = quaternion[2]
        paddle_pose.orientation.w = quaternion[3]
        self.move_group_commander.set_pose_target(paddle_pose)
        succ, plan, time, error_code = self.move_group_commander.plan()
        if not succ:
            self.move_group_commander.clear_pose_targets()
            return  None
        self.move_group_commander.execute(plan, wait=True)
        self.move_group_commander.stop()
        self.move_group_commander.clear_pose_targets()

        rospy.sleep(3)
        self.pincer_pos_publisher.publish(0.1)
        rospy.sleep(1)
        
        quaternion = quaternion_from_euler(0, 1.5707, 1.5707, axes='sxyz')
        paddle_pose = Pose()
        paddle_pose.position.x = self.paddle_x 
        paddle_pose.position.y = self.paddle_y
        paddle_pose.position.z = self.paddle_z_above
        paddle_pose.orientation.x = quaternion[0]
        paddle_pose.orientation.y = quaternion[1]
        paddle_pose.orientation.z = quaternion[2]
        paddle_pose.orientation.w = quaternion[3]
        self.move_group_commander.set_pose_target(paddle_pose)
        succ, plan, time, error_code = self.move_group_commander.plan()
        if not succ:
            self.move_group_commander.clear_pose_targets()
            return  None
        self.move_group_commander.execute(plan, wait=True)
        self.move_group_commander.stop()
        self.move_group_commander.clear_pose_targets()


        rospy.sleep(1)
        return EmptyResponse()


    def KeepingCallback(self, req: EmptyRequest) -> EmptyResponse:
        """ Callback function for the start_keeping service
        Set keeping to True
         Args:
            req (std_msgs/Empty)
        Returns:ERROR: The following tests failed to run:
 * testrobokeeper_test

            EmptyResponse
        """
        self.keeping = True
        return EmptyResponse()

    def StoppingCallback(self, req: EmptyRequest) -> EmptyResponse:
        """ Callback function for the stop_keeping service
        Set keeping to False
         Args:
            req (std_msgs/Empty)
        Returns:
            EmptyResponse
        """
        self.keeping = False
        return EmptyResponse()

    def PositionInputCallback(self, msg : Goalie_coord) -> None:
        """ Callback function for the Goalie_coord message
        interprets current x,y,z position of the ball in frame and sends corresponding joint trajectory 
        commands to the arm controller to move the arm, and determine whether the ball is in the net.  

         Args:
            msg (robokeeper/Goalie_coord)
        """

        self.msg_count +=1

        # if not keeping, do nothing
        if not self.keeping:
            self.msg_count = 0
            return

        # if keeping:
        # initialize joint trajectory message to publish to arm_controller/command topic.
        JointState_msg = JointTrajectory()
        JointState_msg.joint_names = ['joint1','joint2','joint3','joint4','joint5','joint6']

        # look for predefined joint angles from the dictionary that corresponds to the current
        # y-position of the ball + kd*dy
        joint_angles = joint_lookup_table(msg.y + 2.25*(msg.y - self.pre_y[0]))

        # if the ball is close to the arm, offset joint 4 angle by -0.5 rad 
        if msg.x <-0.6:
            joint_angles[4] = joint_angles[4]-0.5  # Flicking motion

        # construct joint trajectory message
        JointTrajectoryPoint_msg = JointTrajectoryPoint()
        JointTrajectoryPoint_msg.positions = joint_angles
        JointTrajectoryPoint_msg.time_from_start.nsecs = 10000000
        JointState_msg.points = [JointTrajectoryPoint_msg] 

        # scorekeeping
        self.previous_ball_in_net = self.ball_in_net
        scores = Scores()

        if msg.x>-1: # ball is not in the net
            self.move_hdt_pub.publish(JointState_msg)
            self.ball_in_net = False
        elif msg.x < -1 and msg.y > -0.25 and msg.y < 0.25: # ball is in the net
            self.ball_in_net = True
            if self.ball_in_net == True and self.previous_ball_in_net == False: 
                # if the ball was previously not in the net, increment human score
                self.goals += 1

        rospy.loginfo(f"Ball in Net?: {self.ball_in_net}")
        rospy.loginfo(f"Goals: {self.goals}")

        # publish scores
        scores.human = self.goals
        scores.robot = 0
        self.score_pub.publish(scores)

        # previous y is set to current y
        self.pre_y.pop(0)
        self.pre_y.append(msg.y)


    def StepCallback(self, req: MoveitRequest) -> MoveitResponse:
        """ Callback function for the step service
        Command arm to move the end-effector to a specified configuration using moveit
            Args:
                req (robokeeper/MoveitRequest)
            return
                MoveitResponse
        """ 
        res = MoveitResponse()
        # MoveIt command
        self.move_group_commander.set_pose_target(req.pose)
        succ, plan, time, error_code = self.move_group_commander.plan()
        if not succ:
            self.move_group_commander.clear_pose_targets()
            res.code = error_code
            return res
        self.now_keep = True
        self.move_group_commander.execute(plan, wait=True)
        self.move_group_commander.stop()
        self.move_group_commander.clear_pose_targets()
        # publish to pincer_joint_position_controller to open/close gripper
        if req.open:
            self.pincer_pos_publisher.publish(0.8)
        else:
            self.pincer_pos_publisher.publish(0.1)

        res.code.val = moveit_msgs.msg.MoveItErrorCodes.SUCCESS
        return res


    def ResetCallback(self, req: EmptyRequest) -> EmptyResponse:
        """ Callback function for the reset service
        Command arm to move the end-effector to the home position
            Args:
                req (std_msgs/Empty)
            return
                EmptyResponse
        """ 
        # quaternion = quaternion_from_euler(0, 1.5707, 0, axes='sxyz')
        # paddle_pose = Pose()
        # paddle_pose.position.x = 0.4
        # paddle_pose.position.y = 0.0
        # paddle_pose.position.z = -0.23
        # paddle_pose.orientation.x = quaternion[0]
        # paddle_pose.orientation.y = quaternion[1]
        # paddle_pose.orientation.z = quaternion[2]
        # paddle_pose.orientation.w = quaternion[3]
        # self.move_group_commander.set_pose_target(paddle_pose)
        # succ, plan, time, error_code = self.move_group_commander.plan()
        # if not succ:
        #     self.move_group_commander.clear_pose_targets()
        #     return  None
        # self.move_group_commander.execute(plan, wait=True)
        # self.move_group_commander.stop()
        # self.move_group_commander.clear_pose_targets()

        # initialize joint trajectory message to publish to arm_controller/command topic.
        JointState_msg = JointTrajectory()
        JointState_msg.joint_names = ['joint1','joint2','joint3','joint4','joint5','joint6']

        # command arm to move joints to predefined home position
        value = [-3.450028078456225, 1.1812012540734964, 2.8532913410087053, 3.1416885303149615, -0.6757391589862014, -1.2594366618108317]
        # value = joint_lookup_table(0.0) # move the arm to center position
        JointTrajectoryPoint_msg = JointTrajectoryPoint()
        JointTrajectoryPoint_msg.positions = value
        JointTrajectoryPoint_msg.time_from_start.nsecs = 10000000
        JointState_msg.points = [JointTrajectoryPoint_msg] 
        self.move_hdt_pub.publish(JointState_msg)

        return EmptyResponse()


    def KeeperCallback(self, req: KeeperRequest) -> KeeperResponse:
        """ Callback function for the keep service
            Args:
                req (robokeeper/KeeperRequest)
            return
                KeeperResponse
        """ 
        res = KeeperResponse()
        if  -0.3 < req.pos < 0.3:
            if not self.now_keep:
                pose = copy.deepcopy(self.home_pose)
                pose.position.y = req.pos
                self.move_group_commander.set_pose_target(pose)
                succ, plan, time, error_code = self.move_group_commander.plan()
                if not succ:
                    self.move_group_commander.clear_pose_targets()
                    res.code = error_code
                    return res
                self.move_group_commander.execute(plan, wait=True)
                self.move_group_commander.stop()
                self.move_group_commander.clear_pose_targets()
                res.code.val = moveit_msgs.msg.MoveItErrorCodes.SUCCESS
                return res
            else:
                waypoints = []
                wpose = copy.deepcopy(self.home_pose)
                wpose.position.y = self.current_y
                for i in range(1):
                    pose = copy.deepcopy(wpose)
                    pose.position.y = req.pos * 0.82
                    quaternion = quaternion_from_euler(1.5707, pose.position.y * 1.5, 0.5 * pose.position.y, axes='syxz')
                    pose.orientation.x = quaternion[0]
                    pose.orientation.y = quaternion[1]
                    pose.orientation.z = quaternion[2]
                    pose.orientation.w = quaternion[3]
                    waypoints.append(pose)
                self.move_group_commander.set_pose_target(pose)
                succ, plan, time, error_code = self.move_group_commander.plan()
                if not succ:
                    self.move_group_commander.clear_pose_targets()
                    res.code = error_code
                    return res
                self.move_group_commander.execute(plan, wait=True)
                self.move_group_commander.stop()
                self.move_group_commander.clear_pose_targets()
                res.code.val = moveit_msgs.msg.MoveItErrorCodes.SUCCESS
                self.current_y = req.pos
            return res
        res.code.val = moveit_msgs.msg.MoveItErrorCodes.PLANNING_FAILED
        return res

    def CloseCallback(self, req: EmptyRequest) -> EmptyResponse:
        """ Callback function for the close service
        Command gripper to close
            Args:
                req (std_msgs/Empty)
            return
                EmptyResponse
        """ 
        self.pincer_pos_publisher.publish(0.1)
        return EmptyResponse()
    
    def OpenCallback(self, req: EmptyRequest) -> EmptyResponse:
        """ Callback function for the open service
        Command gripper to open
            Args:
                req (std_msgs/Empty)
            return
                EmptyResponse
        """ 
        self.pincer_pos_publisher.publish(0.8)
        return EmptyResponse()

    
def main():
    motion_control = MotionControl()
    rospy.spin()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
