#!/usr/bin/env python
""" The transforms node subscribes to the x,y,z coordinates of the ball in the camera's frame and the
    transformation of an AprilTag to the camera's frame. Using these along with the measured transformation 
    between the AprilTag and the robot frame, the location of the ball coordinates in the robot frame is
    determined and published.

    SUBSCRIBERS:
        Xy_depth (robokeeper/Xy_depth) - x,y,z coordinates of the ball with respect to the camera's frame
        tag_detections (AprilTagDetectionArray) - transformations of AprilTag relative to the camera frame

    PUBLISHERS:
        Goalie_coord (robokeeper/Goalie_coord) - x,y,z coordinates of the ball with respect to the robot's frame
    
    SERVICES:
        None
"""
import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CameraInfo
from robokeeper.msg import Xy_depth, Goalie_coord
from apriltag_ros.msg import AprilTagDetectionArray
import cv2
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import modern_robotics as mr

class Transforms():
    '''
    Initializes node, takes in CV coordinate data, computes transformations, and outputs
    ball coordinates in the robot frame
    '''
    def __init__(self):
        # Subscribe to ball coordinates in camera frame and AprilTag detection
        rospy.Subscriber("/Xy_depth", Xy_depth, self.callback_coords)
        rospy.Subscriber("/tag_detections", AprilTagDetectionArray, self.tf)
        
        # Create publisher to publish ball coordinates in robot frame
        self.pub = rospy.Publisher("/Goalie_coord", Goalie_coord, queue_size=10)
  
        self.count = 0

    def callback_coords(self,data): 
        """ 
        Function: Callback function for getting ball coordinates in camera frame
        Args:
            data (robokeeper/Xy_depth) - xyz coordinates of ball relative to the camera frame
        Returns:
            None
        """
        # Get xyz of ball relative to camera frame
        self.ball_x = data.x
        self.ball_y = data.y
        self.ball_z = data.depth
        self.ball_flag = data.flag
        
    def tf(self,data):
        """ 
        Function: Callback function for detecting the AprilTag
        Args:
            data (AprilTagDetectionArray) - transformation between detected AprilTag and camera frame
        Returns:
            None
        """
        transform = data

        # Get transform data from AprilTag
        self.x1 = data.detections[0].pose.pose.pose.position.x
        self.y1 = data.detections[0].pose.pose.pose.position.y
        self.z1 = data.detections[0].pose.pose.pose.position.z
        orientation1 = data.detections[0].pose.pose.pose.orientation
        orientation_list1 = [orientation1.x, orientation1.y, orientation1.z, orientation1.w]
        (roll1, pitch1, yaw1) = euler_from_quaternion (orientation_list1)

        # Get the translation from the AprilTag to camera frame
        translation1 = np.array([[1, 0, 0, self.x1],
                                 [0, 1, 0, self.y1],
                                 [0, 0, 1, self.z1],
                                 [0, 0, 0,       1]])

        # Get transform data of AprilTag relative to camera frame
        Tx_rot1 = np.array([[1,         0,          0, 0],
                            [0, np.cos(0), -np.sin(0), 0],
                            [0, np.sin(0),  np.cos(0), 0],
                            [0,         0,          0, 1]])
        Ty_rot1 = np.array([[ np.cos(pitch1), 0, np.sin(pitch1), 0],
                            [              0, 1,              0, 0],
                            [-np.sin(pitch1), 0, np.cos(pitch1), 0],
                            [              0, 0,              0, 1]])
        Tz_rot1 = np.array([[np.cos(yaw1), -np.sin(yaw1), 0, 0],
                            [np.sin(yaw1),  np.cos(yaw1), 0, 0],
                            [           0,             0, 1, 0],
                            [           0,             0, 0, 1]])
        Trot1 = Tz_rot1@Ty_rot1@Tx_rot1
        TCam_April1 = Trot1@translation1 #Transform of AprilTag relative to camera
        TApril_Cam1 = mr.TransInv(TCam_April1) # Transofmr of camera relative to AprilTag

        # Transform of AprilTag relative to robot frame (measured physically)
        TRobot_April1 = np.array([[1, 0, 0,  0.5],
                                  [0, 1, 0,    0],
                                  [0, 0, 1, 0.45],
                                  [0, 0, 0,    1]])

        # Transform of ball coordinates in camera frame
        TCamera_Ball = np.array([[1, 0, 0, self.ball_x],
                                 [0, 1, 0, self.ball_y],
                                 [0, 0, 1, self.ball_z],
                                 [0, 0, 0,           1]])

        # Transform of camera in robot frame
        TRobot_Camera = np.array([[1, 0, 0, -0.61],
                                  [0, 1, 0,     0],
                                  [0, 0, 1,     1],
                                  [0, 0, 0,     1]])

        # Calculate transform of ball coordinates in robot frame
        TRB = TRobot_April1@TApril_Cam1@TCamera_Ball

        # Package transform between ball and robot frame into variable of type Goalie_coord
        goalie_xyz = Goalie_coord()
        goalie_xyz.x = TRB[0][3]
        goalie_xyz.y = -TRB[1][3]-0.27
        goalie_xyz.z = -TRB[2][3]
        
        # If there is a ball in frame, publish its (robot frame) coordinates
        if self.ball_flag == 1:
            self.pub.publish(goalie_xyz)

if __name__=="__main__":
    rospy.init_node("Transform_node")
    T = Transforms()
    rospy.spin()
