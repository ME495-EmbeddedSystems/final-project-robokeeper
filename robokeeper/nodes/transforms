#!/usr/bin/env python

import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CameraInfo
from robokeeper.msg import Xy_depth, Goalie_coord
from apriltag_ros.msg import AprilTagDetectionArray
import cv2
import numpy as np
from robokeeper.srv import Keeper, KeeperRequest, KeeperResponse
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import modern_robotics as mr

class Transforms():
    def __init__(self):
        rospy.Subscriber("/Xy_depth", Xy_depth, self.callback_coords)
        rospy.Subscriber("/tag_detections", AprilTagDetectionArray, self.tf)
        self.pub = rospy.Publisher("/Goalie_coord", Goalie_coord, queue_size=10)
        self.__keeper = rospy.ServiceProxy("keep",Keeper)
        self.count = 0
        # self.ball_flag = 0

    def callback_coords(self,data):
        # print(data)
        #Get xyz of ball relative to camera
        self.ball_x = data.x
        self.ball_y = data.y
        self.ball_z = data.depth
        self.ball_flag = data.flag
    def tf(self,data):
        transform = data

        #Get data from tag 69
        self.x1 = transform.detections[0].pose.pose.pose.position.x
        self.y1 = transform.detections[0].pose.pose.pose.position.y
        self.z1 = transform.detections[0].pose.pose.pose.position.z
        orientation1 = transform.detections[0].pose.pose.pose.orientation
        orientation_list1 = [orientation1.x, orientation1.y, orientation1.z, orientation1.w]
        (roll1, pitch1, yaw1) = euler_from_quaternion (orientation_list1)
        # print(roll, pitch1, yaw1)
        
        #Get data from tag 420
        self.x2 = transform.detections[1].pose.pose.pose.position.x
        self.y2 = transform.detections[1].pose.pose.pose.position.y
        self.z2 = transform.detections[1].pose.pose.pose.position.z
        orientation2 = transform.detections[1].pose.pose.pose.orientation
        orientation_list2 = [orientation2.x, orientation2.y, orientation2.z, orientation2.w]
        (roll2, pitch2, yaw2) = euler_from_quaternion (orientation_list2)

        #Get the translation from the camera to april tag 69
        translation1 = np.array([ [1,0,0,self.x1],[0,1,0,self.y1],[0,0,1,self.z1],[0,0,0,1] ])
        #Get the translation from the camera to april tag 420   #CODY YOULL NEED TO EDIT THIS TO THE IDEAL LOCATION FOR THE PADDLE
        translation2 = np.array([ [1,0,0,self.x2],[0,1,0,self.y2],[0,0,1,self.z2],[0,0,0,1] ])

        #transforms for the camera to april tag 69
        Tx_rot1 = np.array([ [1,0,0,0],[0,np.cos(0),-np.sin(0),0],[0,np.sin(0),np.cos(0),0],[0,0,0,1] ])
        Ty_rot1 = np.array([ [np.cos(pitch1),0,np.sin(pitch1),0],[0,1,0,0],[-np.sin(pitch1),0,np.cos(pitch1),0],[0,0,0,1] ])
        Tz_rot1 = np.array([ [np.cos(yaw1),-np.sin(yaw1),0,0],[np.sin(yaw1),np.cos(yaw1),0,0],[0,0,1,0],[0,0,0,1] ])
        Trot1 = Tz_rot1@Ty_rot1@Tx_rot1
        TCam_April1 = Trot1@translation1
        TApril_Cam1 = mr.TransInv(TCam_April1)


        #transforms for the camera to april tag 420
        Tx_rot2 = np.array([ [1,0,0,0],[0,np.cos(0),-np.sin(0),0],[0,np.sin(0),np.cos(0),0],[0,0,0,1] ])
        Ty_rot2 = np.array([ [np.cos(pitch2),0,np.sin(pitch2),0],[0,1,0,0],[-np.sin(pitch2),0,np.cos(pitch2),0],[0,0,0,1] ])
        Tz_rot2 = np.array([ [np.cos(yaw2),-np.sin(yaw2),0,0],[np.sin(yaw2),np.cos(yaw2),0,0],[0,0,1,0],[0,0,0,1] ])
        Trot2 = Tz_rot2@Ty_rot2@Tx_rot2
        TCam_April2 = Trot2@translation2
        TApril_Cam2 = mr.TransInv(TCam_April2)

        #For the first april tag, get the translation from the base of the robot to april tag 69
        TRobot_April1 = np.array([ [1,0,0,0.5],[0,1,0,0],[0,0,1,0.45],[0,0,0,1] ])
        #For the second april tag, get the transform from the base of the robot to april tag 420, CODY YOULL NEED TO CHANGE THIS
        TRobot_April2 = np.array([ [1,0,0,0.5],[0,1,0,0],[0,0,1,0.45],[0,0,0,1] ])
        
        if self.ball_flag == 1:
            TCamera_Ball = np.array([ [1,0,0,self.ball_x],[0,1,0,self.ball_y],[0,0,1,self.ball_z],[0,0,0,1] ])
        elif self.ball_flag == 0:
            TCamera_Ball = np.array([ [1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1] ])
            
        TRB = TRobot_April1@TApril_Cam1@TCamera_Ball

        TR_PADDLE = TRobot_April2@TApril_Cam2
        goalie_xyz = Goalie_coord()
        goalie_xyz.x = TRB[0][3]
        goalie_xyz.y = -TRB[1][3]-0.27
        goalie_xyz.z = -TRB[2][3]
        
        if self.ball_flag == 1:
            self.pub.publish(goalie_xyz)
        
 

   

if __name__=="__main__":
    rospy.init_node("Transform_node")
    T = Transforms()
    rospy.spin()

    # Rc_r Rc_b
    # Rrw_c * Rc_b