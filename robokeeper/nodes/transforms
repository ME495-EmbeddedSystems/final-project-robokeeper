#!/usr/bin/env python

import rospy
from cv_bridge import CvBridge
from sensor_msgs.msg import Image, CameraInfo
from robokeeper.msg import xy_depth, goalie_coord
from apriltag_ros.msg import AprilTagDetectionArray
import cv2
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler
import modern_robotics as mr

class Transforms():
    def __init__(self):
        rospy.Subscriber("/xy_depth", xy_depth, self.callback_coords)
        rospy.Subscriber("/tag_detections", AprilTagDetectionArray, self.tf)
        self.pub = rospy.Publisher("/goalie_coord", goalie_coord, queue_size=10)

    def callback_coords(self,data):
        # print(data)
        #Get xyz of ball relative to camera
        self.ball_x = data.x
        self.ball_y = data.y
        self.ball_z = data.depth

    def tf(self,data):
        transform = data

        self.x = transform.detections[0].pose.pose.pose.position.x
        self.y = transform.detections[0].pose.pose.pose.position.y
        self.z = transform.detections[0].pose.pose.pose.position.z
        orientation_q = transform.detections[0].pose.pose.pose.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll, pitch, yaw) = euler_from_quaternion (orientation_list)
        print(roll, pitch, yaw)
        

        translation = np.array([ [1,0,0,self.x],[0,1,0,self.y],[0,0,1,self.z],[0,0,0,1] ])
        
        # translation = np.array([ [1,0,0,-self.x],[0,1,0,-self.y],[0,0,1,self.z],[0,0,0,1] ])
        Tx_rot = np.array([ [1,0,0,0],[0,np.cos(0),-np.sin(0),0],[0,np.sin(0),np.cos(0),0],[0,0,0,1] ])
        Ty_rot = np.array([ [np.cos(pitch),0,np.sin(pitch),0],[0,1,0,0],[-np.sin(pitch),0,np.cos(pitch),0],[0,0,0,1] ])
        Tz_rot = np.array([ [np.cos(yaw),-np.sin(yaw),0,0],[np.sin(yaw),np.cos(yaw),0,0],[0,0,1,0],[0,0,0,1] ])
        Trot = Tz_rot@Ty_rot@Tx_rot
        TCam_April = Trot@translation
        TApril_Cam = mr.TransInv(TCam_April)

        # TRobot_April = np.array([ [1,0,0,-0.13],[0,1,0,0.45],[0,0,1,-0.69],[0,0,0,1] ])
        TRobot_April = np.array([ [1,0,0,0.5],[0,1,0,0],[0,0,1,0.45],[0,0,0,1] ])

        TCamera_Ball = np.array([ [1,0,0,self.ball_x],[0,1,0,self.ball_y],[0,0,1,self.ball_z],[0,0,0,1] ])
        TRB = TRobot_April@TApril_Cam@TCamera_Ball
        goalie_x = TRB[0][3]
        goalie_y = TRB[1][3]+0.1
        goalie_z = -TRB[2][3]
        print([TRB[0][3],TRB[1][3]+0.1,-TRB[2][3]])
        goalie_xyz = goalie_coord()
        goalie_xyz.x = TRB[0][3]
        goalie_xyz.y = TRB[1][3]+0.1
        goalie_xyz.z = -TRB[2][3]
        self.pub.publish(goalie_xyz)

        # print(x)

    def get_transform(self, R_camera_ball, R_camera_april_tag):
        #Make the transforms but needs to be in the form of an matrix.
        
        x_rot = np.array([ [1,0,0,0],[0,np.cos(theta),-np.sin(theta),0],[0,np.sin(theta),np.cos(theta),0],[0,0,0,1] ])
        y_rot = np.array([ [np.cos(theta),0,np.sin(theta),0],[0,1,0,0],[-np.sin(theta),0,np.cos(theta),0],[0,0,0,1] ])
        z_rot = np.array([ [np.cos(theta),-np.sin(theta),0,0],[np.sin(theta),np.cos(theta),0,0],[0,0,1,0],[0,0,0,1] ])

        T_Camera_Ball = np.array([ [1,0,0,self.ball_x],[0,1,0,self.ball_y],[0,0,1,self.ball_z],[0,0,0,1] ])
        T_Camera_April = np.array([ [1,0,0,self.x],[0,1,0,self.y],[0,0,1,self.z],[0,0,0,1] ])
        T_Robot_April = np.array([ [1,0,0,self.x],[0,1,0,self.y],[0,0,1,self.z],[0,0,0,1] ])
    def not_used(self,data):
        orientation_q = transform.detections[0].pose.pose.pose.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll, pitch, yaw) = euler_from_quaternion (orientation_list)
        print(roll, pitch, yaw)
        T_April_Robot = np.array([ [1,0,0,0],[0,1,0,0.45],[0,0,1,-0.69],[0,0,0,1] ])

        # translation = np.array([ [1,0,0,self.x],[0,1,0,self.y],[0,0,1,self.z],[0,0,0,1] ])
        translation = np.array([ [1,0,0,-self.x],[0,1,0,-self.y],[0,0,1,self.z],[0,0,0,1] ])
        x_rot = np.array([ [1,0,0,0],[0,np.cos(roll),-np.sin(roll),0],[0,np.sin(roll),np.cos(roll),0],[0,0,0,1] ])
        y_rot = np.array([ [np.cos(pitch),0,np.sin(pitch),0],[0,1,0,0],[-np.sin(pitch),0,np.cos(pitch),0],[0,0,0,1] ])
        z_rot = np.array([ [np.cos(yaw),-np.sin(yaw),0,0],[np.sin(yaw),np.cos(yaw),0,0],[0,0,1,0],[0,0,0,1] ])
        RCam_Robot = z_rot@y_rot@x_rot@translation
        
   
        T_Camera_Ball = np.array([ [1,0,0,self.ball_x],[0,1,0,self.ball_y],[0,0,1,self.ball_z],[0,0,0,1] ])
        R = T_Camera_Ball@R
        print(R)

        # print(x)
    

if __name__=="__main__":
    rospy.init_node("Transform_node")
    T = Transforms()
    rospy.spin()

    # Rc_r Rc_b
    # Rrw_c * Rc_b